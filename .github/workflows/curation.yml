name: Data for curatedMetagenomicData Curation by DOI


on:
  workflow_dispatch:
  issues:
    types: [opened] 

jobs:

  curation-comment:
    permissions:
      issues: write

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    container: bioconductor/bioconductor_docker:devel

    runs-on: ubuntu-latest

    outputs:
      author: ${{ steps.get-doi.outputs.AUTHOR }}
      year: ${{ steps.get-doi.outputs.YEAR }}

    steps:

      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/R/site-library
            /usr/local/lib/R/library
          key: ${{ runner.os }}-curatedmetagenomicdata-curation

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         Rscript -e "install.packages(c('stringr', 'httr2'), repos = 'https://cloud.r-project.org', dependencies = c('Depends', 'Imports'))"

      - name: Get DOI
        id: get-doi
        run: |
          doi <- getPattern("${{ github.event.issue.body }}", "doi")
          bioproject_id <- getPattern("${{ github.event.issue.body }}",
                                      "bioproject")
          crossref <- getCrossref(doi)
          pmid <- getPmid(doi)

          system(paste0("echo DOI='https://doi.org/", doi, "' >> $GITHUB_OUTPUT"))
          system(paste0("echo AUTHOR='", crossref["author"], "' >> $GITHUB_OUTPUT"))
          system(paste0("echo TITLE='", crossref["title"], "' >> $GITHUB_OUTPUT"))
          system(paste0("echo JOURNAL='", crossref["journal"], "' >> $GITHUB_OUTPUT"))
          system(paste0("echo YEAR=", crossref["year"], " >> $GITHUB_OUTPUT"))
          system(paste0("echo PMID=", pmid, " >> $GITHUB_OUTPUT"))
          system(paste0("echo BIOPROJECT_ID='", bioproject_id, "' >> $GITHUB_OUTPUT"))
        shell: Rscript {0}

      - uses: actions/github-script@v7
        if: steps.get-doi.outputs.DOI != ''
        with:
          script: |
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "[Study]: ${{ steps.get-doi.outputs.TITLE }}"
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 
              `
              ### Title
              ${{ steps.get-doi.outputs.TITLE }}

              ### DOI
              ${{ steps.get-doi.outputs.DOI }}

              ### PMID
              ${{ steps.get-doi.outputs.PMID }}

              ### Author
              ${{ steps.get-doi.outputs.AUTHOR }}

              ### Journal
              ${{ steps.get-doi.outputs.JOURNAL }}

              ### Year
              ${{ steps.get-doi.outputs.YEAR }}

              ### BioProject ID
              ${{ steps.get-doi.outputs.BIOPROJECT_ID }}

              ðŸ‘‹ Thanks for submitting! Attempting to generate templates (may take a few minutes).
              `
            })

  create-templates:

    needs: curation-comment
    
    permissions:
      issues: write
      contents: write

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    container: bioconductor/bioconductor_docker:devel

    runs-on: ubuntu-latest

    steps:

      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/R/site-library
            /usr/local/lib/R/library
          key: ${{ runner.os }}-curatedmetagenomicdata-curation

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         Rscript -e "install.packages('stringr'), repos = 'https://cloud.r-project.org', dependencies = c('Depends', 'Imports'))"

      - name: Checkout repository
        id: checkout-repository
        uses: actions/checkout@v4
 
      - name: Create templates
        id: create-templates
        run: |
          BASE <- baseName("${{ needs.curation-comment.outputs.author }}",
                           "${{ needs.curation-comment.outputs.year }}")
          system(paste0("echo BASE=", BASE, " >> $GITHUB_OUTPUT"))
          path <- paste(Sys.getenv("GITHUB_WORKSPACE"), "inst/curated", sep = "/")
          template_exists <- createTemplate(BASE, path)
          if (template_created) {
              system(paste0("echo CREATED='true' >> $GITHUB_OUTPUT"))
              system(paste0("echo MESSAGE='Success: Created' >> $GITHUB_OUTPUT"))
          } else {
              system(paste0("echo CREATED='false' >> $GITHUB_OUTPUT"))
              system(paste0("echo MESSAGE='Failure: Could not create' >> $GITHUB_OUTPUT"))
          }
        shell: Rscript {0}

      - name: Setup git config
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Commit templates
        if: ${{ steps.create-templates.outputs.CREATED == 'true' }}
        id: commit-templates
        run: |
          git add $GITHUB_WORKSPACE/inst/curated/${{ steps.create-templates.outputs.BASE }}/*.tsv
          git commit -m "Add ${{ steps.create-templates.outputs.BASE }}"
          git push origin ${{ github.event.repository.default_branch }}
 
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 
              `
              ${{ steps.create-templates.outputs.MESSAGE }} ${{ steps.create-templates.outputs.BASE }}
              `
            })
